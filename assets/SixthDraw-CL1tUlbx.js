import{h as g,l as _,o as v,i as o,c,F as k,S,t as r}from"./index-BJpzf9IE.js";import{I as C}from"./chess_pgn_logic-3ui-LPsv.js";import{S as x,C as P}from"./Shalala-B8qAGfmd.js";import{T as Y,C as I}from"./Chesstree2-JraKSid0.js";var N=r("<div class=sixth><div class=board-wrap></div><div class=replay-wrap><div class=replay-header><h2 class=eval-title> +0.2 </h2></div><div class=replay><div class=replay-v></div><div class=tools></div></div></div><div class=howto><h1> Sixth Game </h1><h2> How to Play </h2><ul><li><p>You play an analysis game against the engine.</p></li><li><p>You play both white and black, Then it's your turn.</p></li><li><p>You have 6 plies to play. You can play any line you like.</p></li><li><p>Then it's engine's turn. It also has 6 plies.</p></li><li><p>Engine will analyse your lines, and prefer to keep your accurate moves, and surely drop your inaccurate moves, and make a new move for each dropped move.</p></li><li><p>Each accurate move you get a point. 4, 5 or 6 accurate moves you get bonus points. No accurate moves game ends.</p></li><li><p>You can use your plies either as separate lines or a single line, whichever you feel is comfortable for you.</p></li><li><p>Essentially you can be playing at most 6 games at once, against the engine.</p></li><li><p class=underline>When an inaccurate move drops, it will automatically drop next moves that comes after it if there is any. So if you rely on a single line, and first move fails, game ends.</p></li></ul><br></div><div class=under><br><div class=howto><h2> Considerations </h2><ul><li>Two player real time adaptation.</li><li>Player doesn't choose a color. Essentially player will try to find a drawing line without blundering for both sides. This might come as easy, just exchanging pieces willingly might put you in a situation.</li><li>To make things interesting and combat this, engine might have a temper that doesn't so much prefer your moves but picks other random but accurate moves adding more diversity to the game.</li><li>Occasionaly, user might want to show a losing line, by indicating the played move as a blunder and give a continuation. This might be incentivized somehow. Similarly user might want to indicate a line as a forcing line, like if a move is the only best move available.</li></ul><br>"),A=r("<small>"),D=r("<h2> plies left"),j=r("<p>Your turn"),F=r("<p> Engine's turn.. "),W=r("<p> Dropping Paths. "),q=r("<p> Analysing moves. ");const R=()=>{let a=new x;const i=new Y(C),[h,f]=g(6),[m,y]=g([],{equals:!1}),[E,w]=g("idle");_(v(()=>a.add_uci,e=>{if(!e)return;let t=h();if(t>0){f(t-1);let l=i.add_uci(e),n=m();n.push(l),y(n),t-1===0&&b().then(s=>(w("drop_fails"),new Promise(p=>setTimeout(p,1e3)).then(p=>{i.drop_failed_paths(),w("idle")}))).then(s=>{f(6)})}}));async function b(){let e=m();const t=e.shift();if(!t)return;const l=await i.tree.request_ceval_and_get_at(t),n=l==null?void 0:l.eval_accuracy;n.accuracy>70?i._solved_paths.add_path(t):n.accuracy<60?(i._failed_paths.add_path(t),e=e.filter(s=>!s.join("").startsWith(t.join("")))):i._solved_paths.add_path(t),y(e),await new Promise(s=>setTimeout(s,1e3)),await b()}_(v(()=>i.fen_last_move,e=>{if(e){let[t,l]=e;a.on_set_fen_uci(t,l)}else a.on_set_fen_uci(C)})),_(v(()=>a.on_wheel,e=>{e&&i.on_wheel(e)}));const T=e=>{const t=e.target;t.tagName!=="PIECE"&&t.tagName!=="SQUARE"&&t.tagName!=="CG-BOARD"||(e.preventDefault(),a.set_on_wheel(Math.sign(e.deltaY)))};return(()=>{var e=N(),t=e.firstChild,l=t.nextSibling,n=l.firstChild,s=n.nextSibling,p=s.firstChild,$=p.nextSibling;return e.addEventListener("wheel",T),o(t,c(P,{get movable(){return h()>0},get doPromotion(){return a.promotion},get onMoveAfter(){return a.on_move_after},get fen_uci(){return a.fen_uci},get color(){return a.turnColor},get dests(){return a.dests}})),o(p,c(I,{lala:i})),o($,c(k,{get each(){return m()},children:u=>(()=>{var d=A();return o(d,u),d})()}),null),o($,c(S,{get when(){return h()===0},get fallback(){return[(()=>{var u=D(),d=u.firstChild;return o(u,h,d),u})(),j()]},get children(){return[F(),c(S,{get when(){return E()==="idle"},get fallback(){return W()},get children(){return q()}})]}}),null),e})()};export{R as default};
